function isPrime(num) {
  if (num <= 1) return false;
  if (num <= 3) return true;

  if (num % 2 === 0 || num % 3 === 0) return false;

  for (let i = 5; i * i <= num; i += 6) {
    if (num % i === 0 || num % (i + 2) === 0) return false;
  }

  return true;
}

function hasOnlyPrimeDigits(num) {
  const primeDigits = new Set([2, 3, 5, 7]);
  const digits = num.toString().split('').map(Number);
  return digits.every((digit) => primeDigits.has(digit));
}

function notPrimes(a, b) {
  const result = [];

  for (let num = a; num < b; num++) {
    if (!isPrime(num) && hasOnlyPrimeDigits(num)) {
      result.push(num);
    }
  }

  return result;
}
//
def sieve_eratosthenes(limit):
    is_prime = [True] * (limit + 1)
    is_prime[0] = is_prime[1] = False
    p = 2
    while p * p <= limit:
        if is_prime[p]:
            for i in range(p * p, limit + 1, p):
                is_prime[i] = False
        p += 1
    return [i for i in range(limit + 1) if is_prime[i]]

def has_only_prime_digits(num):
    while num > 0:
        digit = num % 10
        if digit not in {2, 3, 5, 7}:
            return False
        num //= 10
    return True

def not_primes(a, b):
    max_num = max(b, 7777)
    primes = set(sieve_eratosthenes(max_num))
    
    result = []
    for num in range(a, b):
        if num not in primes and has_only_prime_digits(num):
            result.append(num)
    return result
