function check(board) {
  // Function to check if a straight line is formed between two points
  const isStraightLine = (x1, y1, x2, y2) => {
    return x1 === x2 || y1 === y2 || Math.abs(x1 - x2) === Math.abs(y1 - y2);
  };

  // Iterate through the board to find 'q' and 'k' positions
  let queenPosition, kingPosition;
  for (let i = 0; i < board.length; i++) {
    for (let j = 0; j < board[i].length; j++) {
      if (board[i][j] === 'q') {
        queenPosition = { x: i, y: j };
      } else if (board[i][j] === 'k') {
        kingPosition = { x: i, y: j };
      }
    }
  }

  // Check if 'q' and 'k' are in a straight line or diagonal
  if (queenPosition && kingPosition) {
    return isStraightLine(
      queenPosition.x,
      queenPosition.y,
      kingPosition.x,
      kingPosition.y
    );
  } else {
    return false; // If 'q' or 'k' is missing
  }
}
//
def is_straight_line(x1, y1, x2, y2):
    return x1 == x2 or y1 == y2 or abs(x1 - x2) == abs(y1 - y2)

def check(board):
    # Function to find indices of 'q' and 'k' positions
    def find_index(matrix, value):
        for i in range(len(matrix)):
            for j in range(len(matrix[i])):
                if matrix[i][j] == value:
                    return i, j
        return None

    # Find indices of 'q' and 'k'
    queen_position = find_index(board, 'q')
    king_position = find_index(board, 'k')

    # Check if 'q' and 'k' are in a straight line or diagonal
    if queen_position is not None and king_position is not None:
        return is_straight_line(queen_position[0], queen_position[1],
                                king_position[0], king_position[1])
    else:
        return False  # If 'q' or 'k' is missing
